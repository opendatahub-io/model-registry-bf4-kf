package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/opendatahub-io/model-registry/internal/model/graph"
)

// Types is the resolver for the types field.
func (r *queryResolver) Types(ctx context.Context, filter *graph.TypeFilter) ([]graph.Type, error) {
	//panic(fmt.Errorf("not implemented: Types - types"))
	id := "1"
	return []graph.Type{graph.ArtifactType{ID: &id, Name: "TestType"}}, nil
}

// ArtifactTypes is the resolver for the artifactTypes field.
func (r *queryResolver) ArtifactTypes(ctx context.Context, filter *graph.TypeFilter) ([]*graph.ArtifactType, error) {
	panic(fmt.Errorf("not implemented: ArtifactTypes - artifactTypes"))
}

// ContextTypes is the resolver for the contextTypes field.
func (r *queryResolver) ContextTypes(ctx context.Context, filter *graph.TypeFilter) ([]*graph.ContextType, error) {
	panic(fmt.Errorf("not implemented: ContextTypes - contextTypes"))
}

// ExecutionTypes is the resolver for the executionTypes field.
func (r *queryResolver) ExecutionTypes(ctx context.Context, filter *graph.TypeFilter) ([]*graph.ExecutionType, error) {
	panic(fmt.Errorf("not implemented: ExecutionTypes - executionTypes"))
}

// Artifacts is the resolver for the artifacts field.
func (r *queryResolver) Artifacts(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.Artifact, error) {
	id := "1"
	return []*graph.Artifact{{ID: &id, Name: "TestArtifact", TypeID: id}}, nil
}

// Contexts is the resolver for the contexts field.
func (r *queryResolver) Contexts(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.Context, error) {
	panic(fmt.Errorf("not implemented: Contexts - contexts"))
}

// Executions is the resolver for the executions field.
func (r *queryResolver) Executions(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.Execution, error) {
	panic(fmt.Errorf("not implemented: Executions - executions"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*graph.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// MlmdDataset is the resolver for the mlmdDataset field.
func (r *queryResolver) MlmdDataset(ctx context.Context, filter *graph.InstanceFilter) ([]*graph.MlmdDataset, error) {
	panic(fmt.Errorf("not implemented: MlmdDataset - mlmdDataset"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
