// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package generated

import (
	"fmt"
	converter "github.com/opendatahub-io/model-registry/internal/converter"
	proto "github.com/opendatahub-io/model-registry/internal/ml_metadata/proto"
	openapi "github.com/opendatahub-io/model-registry/internal/model/openapi"
)

type MLMDToOpenAPIConverterImpl struct{}

func (c *MLMDToOpenAPIConverterImpl) ConvertModelArtifact(source *proto.Artifact) (*openapi.ModelArtifact, error) {
	var pOpenapiModelArtifact *openapi.ModelArtifact
	if source != nil {
		var openapiModelArtifact openapi.ModelArtifact
		mapStringOpenapiMetadataValue, err := converter.MapMLMDCustomProperties((*source).CustomProperties)
		if err != nil {
			return nil, err
		}
		openapiModelArtifact.CustomProperties = &mapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalId != nil {
			xstring := *(*source).ExternalId
			pString = &xstring
		}
		openapiModelArtifact.ExternalID = pString
		var pString2 *string
		if (*source).Uri != nil {
			xstring2 := *(*source).Uri
			pString2 = &xstring2
		}
		openapiModelArtifact.Uri = pString2
		openapiModelArtifact.State = converter.MapMLMDModelArtifactState((*source).State)
		openapiModelArtifact.Name = converter.MapNameFromOwned((*source).Name)
		openapiModelArtifact.Id = converter.Int64ToString((*source).Id)
		openapiModelArtifact.CreateTimeSinceEpoch = converter.Int64ToString((*source).CreateTimeSinceEpoch)
		openapiModelArtifact.LastUpdateTimeSinceEpoch = converter.Int64ToString((*source).LastUpdateTimeSinceEpoch)
		xstring3, err := converter.MapArtifactType(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field ArtifactType: %w", err)
		}
		openapiModelArtifact.ArtifactType = xstring3
		openapiModelArtifact.ModelFormatName = converter.MapModelArtifactFormatName((*source).Properties)
		openapiModelArtifact.Runtime = converter.MapModelArtifactRuntime((*source).Properties)
		openapiModelArtifact.StorageKey = converter.MapModelArtifactStorageKey((*source).Properties)
		openapiModelArtifact.StoragePath = converter.MapModelArtifactStoragePath((*source).Properties)
		openapiModelArtifact.ModelFormatVersion = converter.MapModelArtifactFormatVersion((*source).Properties)
		openapiModelArtifact.ServiceAccountName = converter.MapModelArtifactServiceAccountName((*source).Properties)
		pOpenapiModelArtifact = &openapiModelArtifact
	}
	return pOpenapiModelArtifact, nil
}
func (c *MLMDToOpenAPIConverterImpl) ConvertModelVersion(source *proto.Context) (*openapi.ModelVersion, error) {
	var pOpenapiModelVersion *openapi.ModelVersion
	if source != nil {
		var openapiModelVersion openapi.ModelVersion
		mapStringOpenapiMetadataValue, err := converter.MapMLMDCustomProperties((*source).CustomProperties)
		if err != nil {
			return nil, err
		}
		openapiModelVersion.CustomProperties = &mapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalId != nil {
			xstring := *(*source).ExternalId
			pString = &xstring
		}
		openapiModelVersion.ExternalID = pString
		openapiModelVersion.Name = converter.MapNameFromOwned((*source).Name)
		openapiModelVersion.Id = converter.Int64ToString((*source).Id)
		openapiModelVersion.CreateTimeSinceEpoch = converter.Int64ToString((*source).CreateTimeSinceEpoch)
		openapiModelVersion.LastUpdateTimeSinceEpoch = converter.Int64ToString((*source).LastUpdateTimeSinceEpoch)
		pOpenapiModelVersion = &openapiModelVersion
	}
	return pOpenapiModelVersion, nil
}
func (c *MLMDToOpenAPIConverterImpl) ConvertRegisteredModel(source *proto.Context) (*openapi.RegisteredModel, error) {
	var pOpenapiRegisteredModel *openapi.RegisteredModel
	if source != nil {
		var openapiRegisteredModel openapi.RegisteredModel
		mapStringOpenapiMetadataValue, err := converter.MapMLMDCustomProperties((*source).CustomProperties)
		if err != nil {
			return nil, err
		}
		openapiRegisteredModel.CustomProperties = &mapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalId != nil {
			xstring := *(*source).ExternalId
			pString = &xstring
		}
		openapiRegisteredModel.ExternalID = pString
		var pString2 *string
		if (*source).Name != nil {
			xstring2 := *(*source).Name
			pString2 = &xstring2
		}
		openapiRegisteredModel.Name = pString2
		openapiRegisteredModel.Id = converter.Int64ToString((*source).Id)
		openapiRegisteredModel.CreateTimeSinceEpoch = converter.Int64ToString((*source).CreateTimeSinceEpoch)
		openapiRegisteredModel.LastUpdateTimeSinceEpoch = converter.Int64ToString((*source).LastUpdateTimeSinceEpoch)
		pOpenapiRegisteredModel = &openapiRegisteredModel
	}
	return pOpenapiRegisteredModel, nil
}
