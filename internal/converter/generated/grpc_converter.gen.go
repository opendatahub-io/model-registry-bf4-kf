// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package generated

import (
	"fmt"
	converter "github.com/opendatahub-io/model-registry/internal/converter"
	proto "github.com/opendatahub-io/model-registry/internal/ml_metadata/proto"
	db "github.com/opendatahub-io/model-registry/internal/model/db"
	openapi "github.com/opendatahub-io/model-registry/internal/model/openapi"
)

type GRPCConverterImpl struct{}

func (c *GRPCConverterImpl) ConvertArtifact(source *proto.Artifact) (*db.Artifact, error) {
	var pDbArtifact *db.Artifact
	if source != nil {
		var dbArtifact db.Artifact
		var xint64 int64
		if (*source).Id != nil {
			xint64 = *(*source).Id
		}
		dbArtifact.ID = xint64
		var xint642 int64
		if (*source).TypeId != nil {
			xint642 = *(*source).TypeId
		}
		dbArtifact.TypeID = xint642
		var pString *string
		if (*source).Uri != nil {
			xstring := *(*source).Uri
			pString = &xstring
		}
		dbArtifact.URI = pString
		dbArtifact.State = converter.ConvertArtifact_State((*source).State)
		var pString2 *string
		if (*source).Name != nil {
			xstring2 := *(*source).Name
			pString2 = &xstring2
		}
		dbArtifact.Name = pString2
		var pString3 *string
		if (*source).ExternalId != nil {
			xstring3 := *(*source).ExternalId
			pString3 = &xstring3
		}
		dbArtifact.ExternalID = pString3
		var xint643 int64
		if (*source).CreateTimeSinceEpoch != nil {
			xint643 = *(*source).CreateTimeSinceEpoch
		}
		dbArtifact.CreateTimeSinceEpoch = xint643
		var xint644 int64
		if (*source).LastUpdateTimeSinceEpoch != nil {
			xint644 = *(*source).LastUpdateTimeSinceEpoch
		}
		dbArtifact.LastUpdateTimeSinceEpoch = xint644
		dbArtifactPropertyList, err := converter.ConvertProtoArtifactProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		dbArtifact.Properties = dbArtifactPropertyList
		pDbArtifact = &dbArtifact
	}
	return pDbArtifact, nil
}
func (c *GRPCConverterImpl) ConvertAssociation(source *proto.Association) (*db.Association, error) {
	var pDbAssociation *db.Association
	if source != nil {
		var dbAssociation db.Association
		var xint64 int64
		if (*source).ContextId != nil {
			xint64 = *(*source).ContextId
		}
		dbAssociation.ContextID = xint64
		var xint642 int64
		if (*source).ExecutionId != nil {
			xint642 = *(*source).ExecutionId
		}
		dbAssociation.ExecutionID = xint642
		pDbAssociation = &dbAssociation
	}
	return pDbAssociation, nil
}
func (c *GRPCConverterImpl) ConvertAttribution(source *proto.Attribution) (*db.Attribution, error) {
	var pDbAttribution *db.Attribution
	if source != nil {
		var dbAttribution db.Attribution
		var xint64 int64
		if (*source).ContextId != nil {
			xint64 = *(*source).ContextId
		}
		dbAttribution.ContextID = xint64
		var xint642 int64
		if (*source).ArtifactId != nil {
			xint642 = *(*source).ArtifactId
		}
		dbAttribution.ArtifactID = xint642
		pDbAttribution = &dbAttribution
	}
	return pDbAttribution, nil
}
func (c *GRPCConverterImpl) ConvertContext(source *proto.Context) (*db.Context, error) {
	var pDbContext *db.Context
	if source != nil {
		var dbContext db.Context
		var xint64 int64
		if (*source).Id != nil {
			xint64 = *(*source).Id
		}
		dbContext.ID = xint64
		var xint642 int64
		if (*source).TypeId != nil {
			xint642 = *(*source).TypeId
		}
		dbContext.TypeID = xint642
		var xstring string
		if (*source).Name != nil {
			xstring = *(*source).Name
		}
		dbContext.Name = xstring
		var pString *string
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			pString = &xstring2
		}
		dbContext.ExternalID = pString
		var xint643 int64
		if (*source).CreateTimeSinceEpoch != nil {
			xint643 = *(*source).CreateTimeSinceEpoch
		}
		dbContext.CreateTimeSinceEpoch = xint643
		var xint644 int64
		if (*source).LastUpdateTimeSinceEpoch != nil {
			xint644 = *(*source).LastUpdateTimeSinceEpoch
		}
		dbContext.LastUpdateTimeSinceEpoch = xint644
		dbContextPropertyList, err := converter.ConvertProtoContextProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		dbContext.Properties = dbContextPropertyList
		pDbContext = &dbContext
	}
	return pDbContext, nil
}
func (c *GRPCConverterImpl) ConvertEvent(source *proto.Event) (*db.Event, error) {
	var pDbEvent *db.Event
	if source != nil {
		var dbEvent db.Event
		var xint64 int64
		if (*source).ArtifactId != nil {
			xint64 = *(*source).ArtifactId
		}
		dbEvent.ArtifactID = xint64
		var xint642 int64
		if (*source).ExecutionId != nil {
			xint642 = *(*source).ExecutionId
		}
		dbEvent.ExecutionID = xint642
		dbEvent.Type = converter.ConvertProtoEventType((*source).Type)
		var xint643 int64
		if (*source).MillisecondsSinceEpoch != nil {
			xint643 = *(*source).MillisecondsSinceEpoch
		}
		dbEvent.MillisecondsSinceEpoch = xint643
		dbEventPathList, err := converter.ConvertProtoEventPath((*source).Path)
		if err != nil {
			return nil, fmt.Errorf("error setting field PathSteps: %w", err)
		}
		dbEvent.PathSteps = dbEventPathList
		pDbEvent = &dbEvent
	}
	return pDbEvent, nil
}
func (c *GRPCConverterImpl) ConvertExecution(source *proto.Execution) (*db.Execution, error) {
	var pDbExecution *db.Execution
	if source != nil {
		var dbExecution db.Execution
		var xint64 int64
		if (*source).Id != nil {
			xint64 = *(*source).Id
		}
		dbExecution.ID = xint64
		var xint642 int64
		if (*source).TypeId != nil {
			xint642 = *(*source).TypeId
		}
		dbExecution.TypeID = xint642
		dbExecution.LastKnownState = converter.ConvertExecution_State((*source).LastKnownState)
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		dbExecution.Name = pString
		var pString2 *string
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			pString2 = &xstring2
		}
		dbExecution.ExternalID = pString2
		var xint643 int64
		if (*source).CreateTimeSinceEpoch != nil {
			xint643 = *(*source).CreateTimeSinceEpoch
		}
		dbExecution.CreateTimeSinceEpoch = xint643
		var xint644 int64
		if (*source).LastUpdateTimeSinceEpoch != nil {
			xint644 = *(*source).LastUpdateTimeSinceEpoch
		}
		dbExecution.LastUpdateTimeSinceEpoch = xint644
		dbExecutionPropertyList, err := converter.ConvertProtoExecutionProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		dbExecution.Properties = dbExecutionPropertyList
		pDbExecution = &dbExecution
	}
	return pDbExecution, nil
}
func (c *GRPCConverterImpl) ConvertToArtifact(source *db.Artifact) (*proto.Artifact, error) {
	var pProtoArtifact *proto.Artifact
	if source != nil {
		var protoArtifact proto.Artifact
		pInt64 := (*source).ID
		protoArtifact.Id = &pInt64
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		protoArtifact.Name = pString
		pInt642 := (*source).TypeID
		protoArtifact.TypeId = &pInt642
		pString2, err := converter.ConvertTypeIDToName((*source).ID)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoArtifact.Type = pString2
		var pString3 *string
		if (*source).URI != nil {
			xstring2 := *(*source).URI
			pString3 = &xstring2
		}
		protoArtifact.Uri = pString3
		var pString4 *string
		if (*source).ExternalID != nil {
			xstring3 := *(*source).ExternalID
			pString4 = &xstring3
		}
		protoArtifact.ExternalId = pString4
		mapStringPProtoValue, err := converter.ConvertToProtoArtifactProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoArtifact.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.ConvertToProtoArtifactCustomProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoArtifact.CustomProperties = mapStringPProtoValue2
		pProtoArtifact_State, err := converter.ConvertToArtifact_State((*source).State)
		if err != nil {
			return nil, fmt.Errorf("error setting field State: %w", err)
		}
		protoArtifact.State = pProtoArtifact_State
		pInt643 := (*source).CreateTimeSinceEpoch
		protoArtifact.CreateTimeSinceEpoch = &pInt643
		pInt644 := (*source).LastUpdateTimeSinceEpoch
		protoArtifact.LastUpdateTimeSinceEpoch = &pInt644
		pProtoArtifact = &protoArtifact
	}
	return pProtoArtifact, nil
}
func (c *GRPCConverterImpl) ConvertToAssociation(source *db.Association) (*proto.Association, error) {
	var pProtoAssociation *proto.Association
	if source != nil {
		var protoAssociation proto.Association
		pInt64 := (*source).ExecutionID
		protoAssociation.ExecutionId = &pInt64
		pInt642 := (*source).ContextID
		protoAssociation.ContextId = &pInt642
		pProtoAssociation = &protoAssociation
	}
	return pProtoAssociation, nil
}
func (c *GRPCConverterImpl) ConvertToAttribution(source *db.Attribution) (*proto.Attribution, error) {
	var pProtoAttribution *proto.Attribution
	if source != nil {
		var protoAttribution proto.Attribution
		pInt64 := (*source).ArtifactID
		protoAttribution.ArtifactId = &pInt64
		pInt642 := (*source).ContextID
		protoAttribution.ContextId = &pInt642
		pProtoAttribution = &protoAttribution
	}
	return pProtoAttribution, nil
}
func (c *GRPCConverterImpl) ConvertToContext(source *db.Context) (*proto.Context, error) {
	var pProtoContext *proto.Context
	if source != nil {
		var protoContext proto.Context
		pInt64 := (*source).ID
		protoContext.Id = &pInt64
		pString := (*source).Name
		protoContext.Name = &pString
		pInt642 := (*source).TypeID
		protoContext.TypeId = &pInt642
		pString2, err := converter.ConvertTypeIDToName((*source).ID)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoContext.Type = pString2
		var pString3 *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString3 = &xstring
		}
		protoContext.ExternalId = pString3
		mapStringPProtoValue, err := converter.ConvertToProtoContextProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoContext.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.ConvertToProtoContextCustomProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoContext.CustomProperties = mapStringPProtoValue2
		pInt643 := (*source).CreateTimeSinceEpoch
		protoContext.CreateTimeSinceEpoch = &pInt643
		pInt644 := (*source).LastUpdateTimeSinceEpoch
		protoContext.LastUpdateTimeSinceEpoch = &pInt644
		pProtoContext = &protoContext
	}
	return pProtoContext, nil
}
func (c *GRPCConverterImpl) ConvertToEvent(source *db.Event) (*proto.Event, error) {
	var pProtoEvent *proto.Event
	if source != nil {
		var protoEvent proto.Event
		pInt64 := (*source).ArtifactID
		protoEvent.ArtifactId = &pInt64
		pInt642 := (*source).ExecutionID
		protoEvent.ExecutionId = &pInt642
		pProtoEvent_Path, err := converter.ConvertToProtoEventPath((*source).PathSteps)
		if err != nil {
			return nil, fmt.Errorf("error setting field Path: %w", err)
		}
		protoEvent.Path = pProtoEvent_Path
		pProtoEvent_Type, err := converter.ConvertToProtoEventType((*source).Type)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoEvent.Type = pProtoEvent_Type
		pInt643 := (*source).MillisecondsSinceEpoch
		protoEvent.MillisecondsSinceEpoch = &pInt643
		pProtoEvent = &protoEvent
	}
	return pProtoEvent, nil
}
func (c *GRPCConverterImpl) ConvertToExecution(source *db.Execution) (*proto.Execution, error) {
	var pProtoExecution *proto.Execution
	if source != nil {
		var protoExecution proto.Execution
		pInt64 := (*source).ID
		protoExecution.Id = &pInt64
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		protoExecution.Name = pString
		pInt642 := (*source).TypeID
		protoExecution.TypeId = &pInt642
		pString2, err := converter.ConvertTypeIDToName((*source).ID)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoExecution.Type = pString2
		var pString3 *string
		if (*source).ExternalID != nil {
			xstring2 := *(*source).ExternalID
			pString3 = &xstring2
		}
		protoExecution.ExternalId = pString3
		pProtoExecution_State, err := converter.ConvertToExecution_State((*source).LastKnownState)
		if err != nil {
			return nil, fmt.Errorf("error setting field LastKnownState: %w", err)
		}
		protoExecution.LastKnownState = pProtoExecution_State
		mapStringPProtoValue, err := converter.ConvertToProtoExecutionProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoExecution.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.ConvertToProtoExecutionCustomProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoExecution.CustomProperties = mapStringPProtoValue2
		pInt643 := (*source).CreateTimeSinceEpoch
		protoExecution.CreateTimeSinceEpoch = &pInt643
		pInt644 := (*source).LastUpdateTimeSinceEpoch
		protoExecution.LastUpdateTimeSinceEpoch = &pInt644
		pProtoExecution = &protoExecution
	}
	return pProtoExecution, nil
}

type OpenAPIConverterImpl struct{}

func (c *OpenAPIConverterImpl) ConvertModelArtifactCreate(source *openapi.ModelArtifactCreate) (*openapi.ModelArtifact, error) {
	var pOpenapiModelArtifact *openapi.ModelArtifact
	if source != nil {
		var openapiModelArtifact openapi.ModelArtifact
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).CustomProperties != nil {
			mapStringOpenapiMetadataValue := make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
			for key, value := range *(*source).CustomProperties {
				mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
			}
			pMapStringOpenapiMetadataValue = &mapStringOpenapiMetadataValue
		}
		openapiModelArtifact.CustomProperties = pMapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString = &xstring
		}
		openapiModelArtifact.ExternalID = pString
		var pString2 *string
		if (*source).Uri != nil {
			xstring2 := *(*source).Uri
			pString2 = &xstring2
		}
		openapiModelArtifact.Uri = pString2
		var pOpenapiArtifactState *openapi.ArtifactState
		if (*source).State != nil {
			openapiArtifactState := openapi.ArtifactState(*(*source).State)
			pOpenapiArtifactState = &openapiArtifactState
		}
		openapiModelArtifact.State = pOpenapiArtifactState
		var pString3 *string
		if (*source).Name != nil {
			xstring3 := *(*source).Name
			pString3 = &xstring3
		}
		openapiModelArtifact.Name = pString3
		var pString4 *string
		if (*source).ModelFormatName != nil {
			xstring4 := *(*source).ModelFormatName
			pString4 = &xstring4
		}
		openapiModelArtifact.ModelFormatName = pString4
		var pString5 *string
		if (*source).Runtime != nil {
			xstring5 := *(*source).Runtime
			pString5 = &xstring5
		}
		openapiModelArtifact.Runtime = pString5
		var pString6 *string
		if (*source).StorageKey != nil {
			xstring6 := *(*source).StorageKey
			pString6 = &xstring6
		}
		openapiModelArtifact.StorageKey = pString6
		var pString7 *string
		if (*source).StoragePath != nil {
			xstring7 := *(*source).StoragePath
			pString7 = &xstring7
		}
		openapiModelArtifact.StoragePath = pString7
		var pString8 *string
		if (*source).ModelFormatVersion != nil {
			xstring8 := *(*source).ModelFormatVersion
			pString8 = &xstring8
		}
		openapiModelArtifact.ModelFormatVersion = pString8
		var pString9 *string
		if (*source).ServiceAccountName != nil {
			xstring9 := *(*source).ServiceAccountName
			pString9 = &xstring9
		}
		openapiModelArtifact.ServiceAccountName = pString9
		pOpenapiModelArtifact = &openapiModelArtifact
	}
	return pOpenapiModelArtifact, nil
}
func (c *OpenAPIConverterImpl) ConvertModelArtifactUpdate(source *openapi.ModelArtifactUpdate) (*openapi.ModelArtifact, error) {
	var pOpenapiModelArtifact *openapi.ModelArtifact
	if source != nil {
		var openapiModelArtifact openapi.ModelArtifact
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).CustomProperties != nil {
			mapStringOpenapiMetadataValue := make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
			for key, value := range *(*source).CustomProperties {
				mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
			}
			pMapStringOpenapiMetadataValue = &mapStringOpenapiMetadataValue
		}
		openapiModelArtifact.CustomProperties = pMapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString = &xstring
		}
		openapiModelArtifact.ExternalID = pString
		var pString2 *string
		if (*source).Uri != nil {
			xstring2 := *(*source).Uri
			pString2 = &xstring2
		}
		openapiModelArtifact.Uri = pString2
		var pOpenapiArtifactState *openapi.ArtifactState
		if (*source).State != nil {
			openapiArtifactState := openapi.ArtifactState(*(*source).State)
			pOpenapiArtifactState = &openapiArtifactState
		}
		openapiModelArtifact.State = pOpenapiArtifactState
		var pString3 *string
		if (*source).ModelFormatName != nil {
			xstring3 := *(*source).ModelFormatName
			pString3 = &xstring3
		}
		openapiModelArtifact.ModelFormatName = pString3
		var pString4 *string
		if (*source).Runtime != nil {
			xstring4 := *(*source).Runtime
			pString4 = &xstring4
		}
		openapiModelArtifact.Runtime = pString4
		var pString5 *string
		if (*source).StorageKey != nil {
			xstring5 := *(*source).StorageKey
			pString5 = &xstring5
		}
		openapiModelArtifact.StorageKey = pString5
		var pString6 *string
		if (*source).StoragePath != nil {
			xstring6 := *(*source).StoragePath
			pString6 = &xstring6
		}
		openapiModelArtifact.StoragePath = pString6
		var pString7 *string
		if (*source).ModelFormatVersion != nil {
			xstring7 := *(*source).ModelFormatVersion
			pString7 = &xstring7
		}
		openapiModelArtifact.ModelFormatVersion = pString7
		var pString8 *string
		if (*source).ServiceAccountName != nil {
			xstring8 := *(*source).ServiceAccountName
			pString8 = &xstring8
		}
		openapiModelArtifact.ServiceAccountName = pString8
		pOpenapiModelArtifact = &openapiModelArtifact
	}
	return pOpenapiModelArtifact, nil
}
func (c *OpenAPIConverterImpl) ConvertModelVersionCreate(source *openapi.ModelVersionCreate) (*openapi.ModelVersion, error) {
	var pOpenapiModelVersion *openapi.ModelVersion
	if source != nil {
		var openapiModelVersion openapi.ModelVersion
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).CustomProperties != nil {
			mapStringOpenapiMetadataValue := make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
			for key, value := range *(*source).CustomProperties {
				mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
			}
			pMapStringOpenapiMetadataValue = &mapStringOpenapiMetadataValue
		}
		openapiModelVersion.CustomProperties = pMapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString = &xstring
		}
		openapiModelVersion.ExternalID = pString
		var pString2 *string
		if (*source).Name != nil {
			xstring2 := *(*source).Name
			pString2 = &xstring2
		}
		openapiModelVersion.Name = pString2
		pOpenapiModelVersion = &openapiModelVersion
	}
	return pOpenapiModelVersion, nil
}
func (c *OpenAPIConverterImpl) ConvertModelVersionUpdate(source *openapi.ModelVersionUpdate) (*openapi.ModelVersion, error) {
	var pOpenapiModelVersion *openapi.ModelVersion
	if source != nil {
		var openapiModelVersion openapi.ModelVersion
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).CustomProperties != nil {
			mapStringOpenapiMetadataValue := make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
			for key, value := range *(*source).CustomProperties {
				mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
			}
			pMapStringOpenapiMetadataValue = &mapStringOpenapiMetadataValue
		}
		openapiModelVersion.CustomProperties = pMapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString = &xstring
		}
		openapiModelVersion.ExternalID = pString
		pOpenapiModelVersion = &openapiModelVersion
	}
	return pOpenapiModelVersion, nil
}
func (c *OpenAPIConverterImpl) ConvertRegisteredModelCreate(source *openapi.RegisteredModelCreate) (*openapi.RegisteredModel, error) {
	var pOpenapiRegisteredModel *openapi.RegisteredModel
	if source != nil {
		var openapiRegisteredModel openapi.RegisteredModel
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).CustomProperties != nil {
			mapStringOpenapiMetadataValue := make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
			for key, value := range *(*source).CustomProperties {
				mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
			}
			pMapStringOpenapiMetadataValue = &mapStringOpenapiMetadataValue
		}
		openapiRegisteredModel.CustomProperties = pMapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString = &xstring
		}
		openapiRegisteredModel.ExternalID = pString
		var pString2 *string
		if (*source).Name != nil {
			xstring2 := *(*source).Name
			pString2 = &xstring2
		}
		openapiRegisteredModel.Name = pString2
		pOpenapiRegisteredModel = &openapiRegisteredModel
	}
	return pOpenapiRegisteredModel, nil
}
func (c *OpenAPIConverterImpl) ConvertRegisteredModelUpdate(source *openapi.RegisteredModelUpdate) (*openapi.RegisteredModel, error) {
	var pOpenapiRegisteredModel *openapi.RegisteredModel
	if source != nil {
		var openapiRegisteredModel openapi.RegisteredModel
		var pMapStringOpenapiMetadataValue *map[string]openapi.MetadataValue
		if (*source).CustomProperties != nil {
			mapStringOpenapiMetadataValue := make(map[string]openapi.MetadataValue, len((*(*source).CustomProperties)))
			for key, value := range *(*source).CustomProperties {
				mapStringOpenapiMetadataValue[key] = c.openapiMetadataValueToOpenapiMetadataValue(value)
			}
			pMapStringOpenapiMetadataValue = &mapStringOpenapiMetadataValue
		}
		openapiRegisteredModel.CustomProperties = pMapStringOpenapiMetadataValue
		var pString *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString = &xstring
		}
		openapiRegisteredModel.ExternalID = pString
		pOpenapiRegisteredModel = &openapiRegisteredModel
	}
	return pOpenapiRegisteredModel, nil
}
func (c *OpenAPIConverterImpl) openapiMetadataValueToOpenapiMetadataValue(source openapi.MetadataValue) openapi.MetadataValue {
	var openapiMetadataValue openapi.MetadataValue
	openapiMetadataValue.MetadataBoolValue = c.pOpenapiMetadataBoolValueToPOpenapiMetadataBoolValue(source.MetadataBoolValue)
	openapiMetadataValue.MetadataDoubleValue = c.pOpenapiMetadataDoubleValueToPOpenapiMetadataDoubleValue(source.MetadataDoubleValue)
	openapiMetadataValue.MetadataIntValue = c.pOpenapiMetadataIntValueToPOpenapiMetadataIntValue(source.MetadataIntValue)
	openapiMetadataValue.MetadataProtoValue = c.pOpenapiMetadataProtoValueToPOpenapiMetadataProtoValue(source.MetadataProtoValue)
	openapiMetadataValue.MetadataStringValue = c.pOpenapiMetadataStringValueToPOpenapiMetadataStringValue(source.MetadataStringValue)
	openapiMetadataValue.MetadataStructValue = c.pOpenapiMetadataStructValueToPOpenapiMetadataStructValue(source.MetadataStructValue)
	return openapiMetadataValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataBoolValueToPOpenapiMetadataBoolValue(source *openapi.MetadataBoolValue) *openapi.MetadataBoolValue {
	var pOpenapiMetadataBoolValue *openapi.MetadataBoolValue
	if source != nil {
		var openapiMetadataBoolValue openapi.MetadataBoolValue
		var pBool *bool
		if (*source).BoolValue != nil {
			xbool := *(*source).BoolValue
			pBool = &xbool
		}
		openapiMetadataBoolValue.BoolValue = pBool
		pOpenapiMetadataBoolValue = &openapiMetadataBoolValue
	}
	return pOpenapiMetadataBoolValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataDoubleValueToPOpenapiMetadataDoubleValue(source *openapi.MetadataDoubleValue) *openapi.MetadataDoubleValue {
	var pOpenapiMetadataDoubleValue *openapi.MetadataDoubleValue
	if source != nil {
		var openapiMetadataDoubleValue openapi.MetadataDoubleValue
		var pFloat64 *float64
		if (*source).DoubleValue != nil {
			xfloat64 := *(*source).DoubleValue
			pFloat64 = &xfloat64
		}
		openapiMetadataDoubleValue.DoubleValue = pFloat64
		pOpenapiMetadataDoubleValue = &openapiMetadataDoubleValue
	}
	return pOpenapiMetadataDoubleValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataIntValueToPOpenapiMetadataIntValue(source *openapi.MetadataIntValue) *openapi.MetadataIntValue {
	var pOpenapiMetadataIntValue *openapi.MetadataIntValue
	if source != nil {
		var openapiMetadataIntValue openapi.MetadataIntValue
		var pString *string
		if (*source).IntValue != nil {
			xstring := *(*source).IntValue
			pString = &xstring
		}
		openapiMetadataIntValue.IntValue = pString
		pOpenapiMetadataIntValue = &openapiMetadataIntValue
	}
	return pOpenapiMetadataIntValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataProtoValueToPOpenapiMetadataProtoValue(source *openapi.MetadataProtoValue) *openapi.MetadataProtoValue {
	var pOpenapiMetadataProtoValue *openapi.MetadataProtoValue
	if source != nil {
		var openapiMetadataProtoValue openapi.MetadataProtoValue
		var pString *string
		if (*source).Type != nil {
			xstring := *(*source).Type
			pString = &xstring
		}
		openapiMetadataProtoValue.Type = pString
		var pString2 *string
		if (*source).ProtoValue != nil {
			xstring2 := *(*source).ProtoValue
			pString2 = &xstring2
		}
		openapiMetadataProtoValue.ProtoValue = pString2
		pOpenapiMetadataProtoValue = &openapiMetadataProtoValue
	}
	return pOpenapiMetadataProtoValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataStringValueToPOpenapiMetadataStringValue(source *openapi.MetadataStringValue) *openapi.MetadataStringValue {
	var pOpenapiMetadataStringValue *openapi.MetadataStringValue
	if source != nil {
		var openapiMetadataStringValue openapi.MetadataStringValue
		var pString *string
		if (*source).StringValue != nil {
			xstring := *(*source).StringValue
			pString = &xstring
		}
		openapiMetadataStringValue.StringValue = pString
		pOpenapiMetadataStringValue = &openapiMetadataStringValue
	}
	return pOpenapiMetadataStringValue
}
func (c *OpenAPIConverterImpl) pOpenapiMetadataStructValueToPOpenapiMetadataStructValue(source *openapi.MetadataStructValue) *openapi.MetadataStructValue {
	var pOpenapiMetadataStructValue *openapi.MetadataStructValue
	if source != nil {
		var openapiMetadataStructValue openapi.MetadataStructValue
		var pString *string
		if (*source).StructValue != nil {
			xstring := *(*source).StructValue
			pString = &xstring
		}
		openapiMetadataStructValue.StructValue = pString
		pOpenapiMetadataStructValue = &openapiMetadataStructValue
	}
	return pOpenapiMetadataStructValue
}
