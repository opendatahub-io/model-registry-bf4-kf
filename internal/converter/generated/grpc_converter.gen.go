// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package generated

import (
	"fmt"
	converter "github.com/opendatahub-io/model-registry/internal/converter"
	proto "github.com/opendatahub-io/model-registry/internal/ml_metadata/proto"
	db "github.com/opendatahub-io/model-registry/internal/model/db"
)

type GRPCConverterImpl struct{}

func (c *GRPCConverterImpl) ConvertArtifact(source *proto.Artifact) (*db.Artifact, error) {
	var pDbArtifact *db.Artifact
	if source != nil {
		var dbArtifact db.Artifact
		var xint64 int64
		if (*source).Id != nil {
			xint64 = *(*source).Id
		}
		dbArtifact.ID = xint64
		var xint642 int64
		if (*source).TypeId != nil {
			xint642 = *(*source).TypeId
		}
		dbArtifact.TypeID = xint642
		var pString *string
		if (*source).Uri != nil {
			xstring := *(*source).Uri
			pString = &xstring
		}
		dbArtifact.URI = pString
		dbArtifact.State = converter.ConvertArtifact_State((*source).State)
		var pString2 *string
		if (*source).Name != nil {
			xstring2 := *(*source).Name
			pString2 = &xstring2
		}
		dbArtifact.Name = pString2
		var pString3 *string
		if (*source).ExternalId != nil {
			xstring3 := *(*source).ExternalId
			pString3 = &xstring3
		}
		dbArtifact.ExternalID = pString3
		var xint643 int64
		if (*source).CreateTimeSinceEpoch != nil {
			xint643 = *(*source).CreateTimeSinceEpoch
		}
		dbArtifact.CreateTimeSinceEpoch = xint643
		var xint644 int64
		if (*source).LastUpdateTimeSinceEpoch != nil {
			xint644 = *(*source).LastUpdateTimeSinceEpoch
		}
		dbArtifact.LastUpdateTimeSinceEpoch = xint644
		dbArtifactPropertyList, err := converter.ConvertProtoArtifactProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		dbArtifact.Properties = dbArtifactPropertyList
		pDbArtifact = &dbArtifact
	}
	return pDbArtifact, nil
}
func (c *GRPCConverterImpl) ConvertAssociation(source *proto.Association) (*db.Association, error) {
	var pDbAssociation *db.Association
	if source != nil {
		var dbAssociation db.Association
		var xint64 int64
		if (*source).ContextId != nil {
			xint64 = *(*source).ContextId
		}
		dbAssociation.ContextID = xint64
		var xint642 int64
		if (*source).ExecutionId != nil {
			xint642 = *(*source).ExecutionId
		}
		dbAssociation.ExecutionID = xint642
		pDbAssociation = &dbAssociation
	}
	return pDbAssociation, nil
}
func (c *GRPCConverterImpl) ConvertAttribution(source *proto.Attribution) (*db.Attribution, error) {
	var pDbAttribution *db.Attribution
	if source != nil {
		var dbAttribution db.Attribution
		var xint64 int64
		if (*source).ContextId != nil {
			xint64 = *(*source).ContextId
		}
		dbAttribution.ContextID = xint64
		var xint642 int64
		if (*source).ArtifactId != nil {
			xint642 = *(*source).ArtifactId
		}
		dbAttribution.ArtifactID = xint642
		pDbAttribution = &dbAttribution
	}
	return pDbAttribution, nil
}
func (c *GRPCConverterImpl) ConvertContext(source *proto.Context) (*db.Context, error) {
	var pDbContext *db.Context
	if source != nil {
		var dbContext db.Context
		var xint64 int64
		if (*source).Id != nil {
			xint64 = *(*source).Id
		}
		dbContext.ID = xint64
		var xint642 int64
		if (*source).TypeId != nil {
			xint642 = *(*source).TypeId
		}
		dbContext.TypeID = xint642
		var xstring string
		if (*source).Name != nil {
			xstring = *(*source).Name
		}
		dbContext.Name = xstring
		var pString *string
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			pString = &xstring2
		}
		dbContext.ExternalID = pString
		var xint643 int64
		if (*source).CreateTimeSinceEpoch != nil {
			xint643 = *(*source).CreateTimeSinceEpoch
		}
		dbContext.CreateTimeSinceEpoch = xint643
		var xint644 int64
		if (*source).LastUpdateTimeSinceEpoch != nil {
			xint644 = *(*source).LastUpdateTimeSinceEpoch
		}
		dbContext.LastUpdateTimeSinceEpoch = xint644
		dbContextPropertyList, err := converter.ConvertProtoContextProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		dbContext.Properties = dbContextPropertyList
		pDbContext = &dbContext
	}
	return pDbContext, nil
}
func (c *GRPCConverterImpl) ConvertEvent(source *proto.Event) (*db.Event, error) {
	var pDbEvent *db.Event
	if source != nil {
		var dbEvent db.Event
		var xint64 int64
		if (*source).ArtifactId != nil {
			xint64 = *(*source).ArtifactId
		}
		dbEvent.ArtifactID = xint64
		var xint642 int64
		if (*source).ExecutionId != nil {
			xint642 = *(*source).ExecutionId
		}
		dbEvent.ExecutionID = xint642
		dbEvent.Type = converter.ConvertProtoEventType((*source).Type)
		var xint643 int64
		if (*source).MillisecondsSinceEpoch != nil {
			xint643 = *(*source).MillisecondsSinceEpoch
		}
		dbEvent.MillisecondsSinceEpoch = xint643
		dbEventPathList, err := converter.ConvertProtoEventPath((*source).Path)
		if err != nil {
			return nil, fmt.Errorf("error setting field PathSteps: %w", err)
		}
		dbEvent.PathSteps = dbEventPathList
		pDbEvent = &dbEvent
	}
	return pDbEvent, nil
}
func (c *GRPCConverterImpl) ConvertExecution(source *proto.Execution) (*db.Execution, error) {
	var pDbExecution *db.Execution
	if source != nil {
		var dbExecution db.Execution
		var xint64 int64
		if (*source).Id != nil {
			xint64 = *(*source).Id
		}
		dbExecution.ID = xint64
		var xint642 int64
		if (*source).TypeId != nil {
			xint642 = *(*source).TypeId
		}
		dbExecution.TypeID = xint642
		dbExecution.LastKnownState = converter.ConvertExecution_State((*source).LastKnownState)
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		dbExecution.Name = pString
		var pString2 *string
		if (*source).ExternalId != nil {
			xstring2 := *(*source).ExternalId
			pString2 = &xstring2
		}
		dbExecution.ExternalID = pString2
		var xint643 int64
		if (*source).CreateTimeSinceEpoch != nil {
			xint643 = *(*source).CreateTimeSinceEpoch
		}
		dbExecution.CreateTimeSinceEpoch = xint643
		var xint644 int64
		if (*source).LastUpdateTimeSinceEpoch != nil {
			xint644 = *(*source).LastUpdateTimeSinceEpoch
		}
		dbExecution.LastUpdateTimeSinceEpoch = xint644
		dbExecutionPropertyList, err := converter.ConvertProtoExecutionProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		dbExecution.Properties = dbExecutionPropertyList
		pDbExecution = &dbExecution
	}
	return pDbExecution, nil
}
func (c *GRPCConverterImpl) ConvertToArtifact(source *db.Artifact) (*proto.Artifact, error) {
	var pProtoArtifact *proto.Artifact
	if source != nil {
		var protoArtifact proto.Artifact
		pInt64 := (*source).ID
		protoArtifact.Id = &pInt64
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		protoArtifact.Name = pString
		pInt642 := (*source).TypeID
		protoArtifact.TypeId = &pInt642
		pString2, err := converter.ConvertTypeIDToName((*source).ID)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoArtifact.Type = pString2
		var pString3 *string
		if (*source).URI != nil {
			xstring2 := *(*source).URI
			pString3 = &xstring2
		}
		protoArtifact.Uri = pString3
		var pString4 *string
		if (*source).ExternalID != nil {
			xstring3 := *(*source).ExternalID
			pString4 = &xstring3
		}
		protoArtifact.ExternalId = pString4
		mapStringPProtoValue, err := converter.ConvertToProtoArtifactProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoArtifact.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.ConvertToProtoArtifactCustomProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoArtifact.CustomProperties = mapStringPProtoValue2
		pProtoArtifact_State, err := converter.ConvertToArtifact_State((*source).State)
		if err != nil {
			return nil, fmt.Errorf("error setting field State: %w", err)
		}
		protoArtifact.State = pProtoArtifact_State
		pInt643 := (*source).CreateTimeSinceEpoch
		protoArtifact.CreateTimeSinceEpoch = &pInt643
		pInt644 := (*source).LastUpdateTimeSinceEpoch
		protoArtifact.LastUpdateTimeSinceEpoch = &pInt644
		pProtoArtifact = &protoArtifact
	}
	return pProtoArtifact, nil
}
func (c *GRPCConverterImpl) ConvertToAssociation(source *db.Association) (*proto.Association, error) {
	var pProtoAssociation *proto.Association
	if source != nil {
		var protoAssociation proto.Association
		pInt64 := (*source).ExecutionID
		protoAssociation.ExecutionId = &pInt64
		pInt642 := (*source).ContextID
		protoAssociation.ContextId = &pInt642
		pProtoAssociation = &protoAssociation
	}
	return pProtoAssociation, nil
}
func (c *GRPCConverterImpl) ConvertToAttribution(source *db.Attribution) (*proto.Attribution, error) {
	var pProtoAttribution *proto.Attribution
	if source != nil {
		var protoAttribution proto.Attribution
		pInt64 := (*source).ArtifactID
		protoAttribution.ArtifactId = &pInt64
		pInt642 := (*source).ContextID
		protoAttribution.ContextId = &pInt642
		pProtoAttribution = &protoAttribution
	}
	return pProtoAttribution, nil
}
func (c *GRPCConverterImpl) ConvertToContext(source *db.Context) (*proto.Context, error) {
	var pProtoContext *proto.Context
	if source != nil {
		var protoContext proto.Context
		pInt64 := (*source).ID
		protoContext.Id = &pInt64
		pString := (*source).Name
		protoContext.Name = &pString
		pInt642 := (*source).TypeID
		protoContext.TypeId = &pInt642
		pString2, err := converter.ConvertTypeIDToName((*source).ID)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoContext.Type = pString2
		var pString3 *string
		if (*source).ExternalID != nil {
			xstring := *(*source).ExternalID
			pString3 = &xstring
		}
		protoContext.ExternalId = pString3
		mapStringPProtoValue, err := converter.ConvertToProtoContextProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoContext.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.ConvertToProtoContextCustomProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoContext.CustomProperties = mapStringPProtoValue2
		pInt643 := (*source).CreateTimeSinceEpoch
		protoContext.CreateTimeSinceEpoch = &pInt643
		pInt644 := (*source).LastUpdateTimeSinceEpoch
		protoContext.LastUpdateTimeSinceEpoch = &pInt644
		pProtoContext = &protoContext
	}
	return pProtoContext, nil
}
func (c *GRPCConverterImpl) ConvertToEvent(source *db.Event) (*proto.Event, error) {
	var pProtoEvent *proto.Event
	if source != nil {
		var protoEvent proto.Event
		pInt64 := (*source).ArtifactID
		protoEvent.ArtifactId = &pInt64
		pInt642 := (*source).ExecutionID
		protoEvent.ExecutionId = &pInt642
		pProtoEvent_Path, err := converter.ConvertToProtoEventPath((*source).PathSteps)
		if err != nil {
			return nil, fmt.Errorf("error setting field Path: %w", err)
		}
		protoEvent.Path = pProtoEvent_Path
		pProtoEvent_Type, err := converter.ConvertToProtoEventType((*source).Type)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoEvent.Type = pProtoEvent_Type
		pInt643 := (*source).MillisecondsSinceEpoch
		protoEvent.MillisecondsSinceEpoch = &pInt643
		pProtoEvent = &protoEvent
	}
	return pProtoEvent, nil
}
func (c *GRPCConverterImpl) ConvertToExecution(source *db.Execution) (*proto.Execution, error) {
	var pProtoExecution *proto.Execution
	if source != nil {
		var protoExecution proto.Execution
		pInt64 := (*source).ID
		protoExecution.Id = &pInt64
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		protoExecution.Name = pString
		pInt642 := (*source).TypeID
		protoExecution.TypeId = &pInt642
		pString2, err := converter.ConvertTypeIDToName((*source).ID)
		if err != nil {
			return nil, fmt.Errorf("error setting field Type: %w", err)
		}
		protoExecution.Type = pString2
		var pString3 *string
		if (*source).ExternalID != nil {
			xstring2 := *(*source).ExternalID
			pString3 = &xstring2
		}
		protoExecution.ExternalId = pString3
		pProtoExecution_State, err := converter.ConvertToExecution_State((*source).LastKnownState)
		if err != nil {
			return nil, fmt.Errorf("error setting field LastKnownState: %w", err)
		}
		protoExecution.LastKnownState = pProtoExecution_State
		mapStringPProtoValue, err := converter.ConvertToProtoExecutionProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoExecution.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.ConvertToProtoExecutionCustomProperties((*source).Properties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoExecution.CustomProperties = mapStringPProtoValue2
		pInt643 := (*source).CreateTimeSinceEpoch
		protoExecution.CreateTimeSinceEpoch = &pInt643
		pInt644 := (*source).LastUpdateTimeSinceEpoch
		protoExecution.LastUpdateTimeSinceEpoch = &pInt644
		pProtoExecution = &protoExecution
	}
	return pProtoExecution, nil
}
