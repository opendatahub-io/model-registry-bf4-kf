// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package generated

import (
	"fmt"
	converter "github.com/opendatahub-io/model-registry/internal/converter"
	proto "github.com/opendatahub-io/model-registry/internal/ml_metadata/proto"
	openapi "github.com/opendatahub-io/model-registry/internal/model/openapi"
)

type OpenAPIToMLMDConverterImpl struct{}

func (c *OpenAPIToMLMDConverterImpl) ConvertModelArtifact(source *openapi.ModelArtifact) (*proto.Artifact, error) {
	var pProtoArtifact *proto.Artifact
	if source != nil {
		var protoArtifact proto.Artifact
		pInt64, err := converter.StringToInt64((*source).Id)
		if err != nil {
			return nil, fmt.Errorf("error setting field Id: %w", err)
		}
		protoArtifact.Id = pInt64
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		protoArtifact.Name = pString
		var pString2 *string
		if (*source).Uri != nil {
			xstring2 := *(*source).Uri
			pString2 = &xstring2
		}
		protoArtifact.Uri = pString2
		var pString3 *string
		if (*source).ExternalID != nil {
			xstring3 := *(*source).ExternalID
			pString3 = &xstring3
		}
		protoArtifact.ExternalId = pString3
		mapStringPProtoValue, err := converter.MapModelArtifactProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoArtifact.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.MapOpenAPICustomProperties((*source).CustomProperties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoArtifact.CustomProperties = mapStringPProtoValue2
		protoArtifact.State = converter.MapOpenAPIModelArtifactState((*source).State)
		pProtoArtifact = &protoArtifact
	}
	return pProtoArtifact, nil
}
func (c *OpenAPIToMLMDConverterImpl) ConvertModelVersion(source *openapi.ModelVersion) (*proto.Context, error) {
	var pProtoContext *proto.Context
	if source != nil {
		var protoContext proto.Context
		pInt64, err := converter.StringToInt64((*source).Id)
		if err != nil {
			return nil, fmt.Errorf("error setting field Id: %w", err)
		}
		protoContext.Id = pInt64
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		protoContext.Name = pString
		var pString2 *string
		if (*source).ExternalID != nil {
			xstring2 := *(*source).ExternalID
			pString2 = &xstring2
		}
		protoContext.ExternalId = pString2
		mapStringPProtoValue, err := converter.MapModelVersionProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoContext.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.MapOpenAPICustomProperties((*source).CustomProperties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoContext.CustomProperties = mapStringPProtoValue2
		pProtoContext = &protoContext
	}
	return pProtoContext, nil
}
func (c *OpenAPIToMLMDConverterImpl) ConvertRegisteredModel(source *openapi.RegisteredModel) (*proto.Context, error) {
	var pProtoContext *proto.Context
	if source != nil {
		var protoContext proto.Context
		pInt64, err := converter.StringToInt64((*source).Id)
		if err != nil {
			return nil, fmt.Errorf("error setting field Id: %w", err)
		}
		protoContext.Id = pInt64
		var pString *string
		if (*source).Name != nil {
			xstring := *(*source).Name
			pString = &xstring
		}
		protoContext.Name = pString
		var pString2 *string
		if (*source).ExternalID != nil {
			xstring2 := *(*source).ExternalID
			pString2 = &xstring2
		}
		protoContext.ExternalId = pString2
		mapStringPProtoValue, err := converter.MapRegisteredModelProperties(source)
		if err != nil {
			return nil, fmt.Errorf("error setting field Properties: %w", err)
		}
		protoContext.Properties = mapStringPProtoValue
		mapStringPProtoValue2, err := converter.MapOpenAPICustomProperties((*source).CustomProperties)
		if err != nil {
			return nil, fmt.Errorf("error setting field CustomProperties: %w", err)
		}
		protoContext.CustomProperties = mapStringPProtoValue2
		pProtoContext = &protoContext
	}
	return pProtoContext, nil
}
