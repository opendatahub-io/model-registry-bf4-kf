/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetadataValueOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataValueOneOf1{}

// MetadataValueOneOf1 struct for MetadataValueOneOf1
type MetadataValueOneOf1 struct {
	DoubleValue *float64 `json:"double_value,omitempty"`
}

// NewMetadataValueOneOf1 instantiates a new MetadataValueOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataValueOneOf1() *MetadataValueOneOf1 {
	this := MetadataValueOneOf1{}
	return &this
}

// NewMetadataValueOneOf1WithDefaults instantiates a new MetadataValueOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataValueOneOf1WithDefaults() *MetadataValueOneOf1 {
	this := MetadataValueOneOf1{}
	return &this
}

// GetDoubleValue returns the DoubleValue field value if set, zero value otherwise.
func (o *MetadataValueOneOf1) GetDoubleValue() float64 {
	if o == nil || IsNil(o.DoubleValue) {
		var ret float64
		return ret
	}
	return *o.DoubleValue
}

// GetDoubleValueOk returns a tuple with the DoubleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataValueOneOf1) GetDoubleValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DoubleValue) {
		return nil, false
	}
	return o.DoubleValue, true
}

// HasDoubleValue returns a boolean if a field has been set.
func (o *MetadataValueOneOf1) HasDoubleValue() bool {
	if o != nil && !IsNil(o.DoubleValue) {
		return true
	}

	return false
}

// SetDoubleValue gets a reference to the given float64 and assigns it to the DoubleValue field.
func (o *MetadataValueOneOf1) SetDoubleValue(v float64) {
	o.DoubleValue = &v
}

func (o MetadataValueOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataValueOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DoubleValue) {
		toSerialize["double_value"] = o.DoubleValue
	}
	return toSerialize, nil
}

type NullableMetadataValueOneOf1 struct {
	value *MetadataValueOneOf1
	isSet bool
}

func (v NullableMetadataValueOneOf1) Get() *MetadataValueOneOf1 {
	return v.value
}

func (v *NullableMetadataValueOneOf1) Set(val *MetadataValueOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataValueOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataValueOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataValueOneOf1(val *MetadataValueOneOf1) *NullableMetadataValueOneOf1 {
	return &NullableMetadataValueOneOf1{value: val, isSet: true}
}

func (v NullableMetadataValueOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataValueOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
