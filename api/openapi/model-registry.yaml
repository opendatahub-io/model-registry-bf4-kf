openapi: 3.0.3
info:
  title: Model Registry REST API
  version: 1.0.0
  description: REST API for Model Registry to create and manage ML model metadata
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  -
    url: 'https://localhost:8080'
paths:
  /api/model_registry/v1alpha1/model_artifact:
    summary: Path used to search for a modelartifact.
    description: >-
      The REST endpoint/path used to search for a `ModelArtifact` entity.  This path contains a `GET`
      operation to perform the find task.
    get:
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/ModelArtifactResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: findModelArtifact
      summary: Get a ModelArtifact that matches search parameters.
      description: Gets the details of a single instance of a `ModelArtifact` that matches search parameters.
    parameters:
      -
        $ref: '#/components/parameters/name'
      -
        $ref: '#/components/parameters/externalID'
  /api/model_registry/v1alpha1/model_artifacts:
    summary: Path used to manage the list of modelartifacts.
    description: >-
      The REST endpoint/path used to list and create zero or more `ModelArtifact` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      parameters:
        -
          $ref: '#/components/parameters/pageSize'
        -
          $ref: '#/components/parameters/orderBy'
        -
          $ref: '#/components/parameters/nextPageToken'
      responses:
        '200':
          $ref: '#/components/responses/ModelArtifactListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getModelArtifacts
      summary: List All ModelArtifacts
      description: Gets a list of all `ModelArtifact` entities.
    post:
      requestBody:
        description: A new `ModelArtifact` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelArtifactCreate'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '201':
          $ref: '#/components/responses/ModelArtifactResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createModelArtifact
      summary: Create a ModelArtifact
      description: Creates a new instance of a `ModelArtifact`.
  '/api/model_registry/v1alpha1/model_artifacts/{modelartifactId}':
    summary: Path used to manage a single ModelArtifact.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `ModelArtifact`. 
      This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and
      delete tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/ModelArtifactResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getModelArtifact
      summary: Get a ModelArtifact
      description: Gets the details of a single instance of a `ModelArtifact`.
    patch:
      requestBody:
        description: Updated `ModelArtifact` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelArtifactUpdate'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/ModelArtifactResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: updateModelArtifact
      summary: Update a ModelArtifact
      description: Updates an existing `ModelArtifact`.
    parameters:
      -
        name: modelartifactId
        description: A unique identifier for a `ModelArtifact`.
        schema:
          type: string
        in: path
        required: true
  /api/model_registry/v1alpha1/model_version:
    summary: Path used to search for a modelversion.
    description: >-
      The REST endpoint/path used to search for a `ModelVersion` entity.  This path contains a `GET`
      operation to perform the find task.
    get:
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/ModelVersionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: findModelVersion
      summary: Get a ModelVersion that matches search parameters.
      description: Gets the details of a single instance of a `ModelVersion` that matches search parameters.
    parameters:
      -
        $ref: '#/components/parameters/externalID'
  /api/model_registry/v1alpha1/model_versions:
    summary: Path used to manage the list of modelversions.
    description: >-
      The REST endpoint/path used to list and create zero or more `ModelVersion` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      parameters:
        -
          $ref: '#/components/parameters/pageSize'
        -
          $ref: '#/components/parameters/orderBy'
        -
          $ref: '#/components/parameters/nextPageToken'
      responses:
        '200':
          $ref: '#/components/responses/ModelVersionListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getModelVersions
      summary: List All ModelVersions
      description: Gets a list of all `ModelVersion` entities.
    post:
      requestBody:
        description: A new `ModelVersion` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionCreate'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '201':
          $ref: '#/components/responses/ModelVersionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createModelVersion
      summary: Create a ModelVersion
      description: Creates a new instance of a `ModelVersion`.
  '/api/model_registry/v1alpha1/model_versions/{modelversionId}':
    summary: Path used to manage a single ModelVersion.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `ModelVersion`. 
      This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and
      delete tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/ModelVersionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getModelVersion
      summary: Get a ModelVersion
      description: Gets the details of a single instance of a `ModelVersion`.
    patch:
      requestBody:
        description: Updated `ModelVersion` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersion'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/ModelVersionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: updateModelVersion
      summary: Update a ModelVersion
      description: Updates an existing `ModelVersion`.
    parameters:
      -
        name: modelversionId
        description: A unique identifier for a `ModelVersion`.
        schema:
          type: string
        in: path
        required: true
  /api/model_registry/v1alpha1/registered_model:
    summary: Path used to search for a registeredmodel.
    description: >-
      The REST endpoint/path used to search for a `RegisteredModel` entity.  This path contains a `GET`
      operation to perform the find task.
    get:
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/RegisteredModelResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: findRegisteredModel
      summary: Get a RegisteredModel that matches search parameters.
      description: Gets the details of a single instance of a `RegisteredModel` that matches search parameters.
    parameters:
      -
        $ref: '#/components/parameters/name'
      -
        $ref: '#/components/parameters/externalID'
  /api/model_registry/v1alpha1/registered_models:
    summary: Path used to manage the list of registeredmodels.
    description: >-
      The REST endpoint/path used to list and create zero or more `RegisteredModel` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      parameters:
        -
          $ref: '#/components/parameters/pageSize'
        -
          $ref: '#/components/parameters/orderBy'
        -
          $ref: '#/components/parameters/nextPageToken'
      responses:
        '200':
          $ref: '#/components/responses/RegisteredModelListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getRegisteredModels
      summary: List All RegisteredModels
      description: Gets a list of all `RegisteredModel` entities.
    post:
      requestBody:
        description: A new `RegisteredModel` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredModelCreate'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '201':
          $ref: '#/components/responses/RegisteredModelResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createRegisteredModel
      summary: Create a RegisteredModel
      description: Creates a new instance of a `RegisteredModel`.
  '/api/model_registry/v1alpha1/registered_models/{registeredmodelId}':
    summary: Path used to manage a single RegisteredModel.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `RegisteredModel`. 
      This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and
      delete tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/RegisteredModelResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getRegisteredModel
      summary: Get a RegisteredModel
      description: Gets the details of a single instance of a `RegisteredModel`.
    patch:
      requestBody:
        description: Updated `RegisteredModel` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredModelUpdate'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/RegisteredModelResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: updateRegisteredModel
      summary: Update a RegisteredModel
      description: Updates an existing `RegisteredModel`.
    parameters:
      -
        name: registeredmodelId
        description: A unique identifier for a `RegisteredModel`.
        schema:
          type: string
        in: path
        required: true
  '/api/model_registry/v1alpha1/registered_models/{registeredmodelId}/versions':
    summary: Path used to manage the list of modelversions for a registeredmodel.
    description: >-
      The REST endpoint/path used to list and create zero or more `ModelVersion` entities for a
      `RegisteredModel`.  This path contains a `GET` and `POST` operation to perform the list and create
      tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      parameters:
        -
          $ref: '#/components/parameters/pageSize'
        -
          $ref: '#/components/parameters/orderBy'
        -
          $ref: '#/components/parameters/nextPageToken'
      responses:
        '200':
          $ref: '#/components/responses/ModelVersionListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getRegisteredModelVersions
      summary: List All RegisteredModel's ModelVersions
      description: Gets a list of all `ModelVersion` entities for the `RegisteredModel`.
    post:
      requestBody:
        description: A new `ModelVersion` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersion'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '201':
          $ref: '#/components/responses/ModelVersionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createRegisteredModelVersion
      summary: Create a ModelVersion in RegisteredModel
      description: Creates a new instance of a `ModelVersion`.
    parameters:
      -
        name: registeredmodelId
        description: A unique identifier for a `RegisteredModel`.
        schema:
          type: string
        in: path
        required: true
  '/api/model_registry/v1alpha1/model_versions/{modelversionId}/artifacts':
    summary: Path used to manage the list of artifacts for a modelversion.
    description: >-
      The REST endpoint/path used to list and create zero or more `Artifact` entities for a
      `ModelVersion`.  This path contains a `GET` and `POST` operation to perform the list and create
      tasks, respectively.
    get:
      tags:
        - ModelRegistryService
      parameters:
        -
          $ref: '#/components/parameters/pageSize'
        -
          $ref: '#/components/parameters/orderBy'
        -
          $ref: '#/components/parameters/nextPageToken'
      responses:
        '200':
          $ref: '#/components/responses/ArtifactListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: getModelVersionArtifacts
      summary: List All ModelVersion's artifacts
      description: Gets a list of all `Artifact` entities for the `ModelVersion`.
    post:
      requestBody:
        description: A new or existing `Artifact` to be associated with the `ModelVersion`.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
        required: true
      tags:
        - ModelRegistryService
      responses:
        '200':
          $ref: '#/components/responses/ArtifactResponse'
        '201':
          $ref: '#/components/responses/ArtifactResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: createModelVersionArtifact
      summary: Create an Artifact in a ModelVersion
      description: Creates a new instance of an Artifact if needed and associates it with `ModelVersion`.
    parameters:
      -
        name: modelversionId
        description: A unique identifier for a `ModelVersion`.
        schema:
          type: string
        in: path
        required: true
components:
  schemas:
    ArtifactState:
      description: |4-
           - PENDING: A state indicating that the artifact may exist.
           - LIVE: A state indicating that the artifact should exist, unless something
          external to the system deletes it.
           - MARKED_FOR_DELETION: A state indicating that the artifact should be deleted.
           - DELETED: A state indicating that the artifact has been deleted.
           - ABANDONED: A state indicating that the artifact has been abandoned, which may be
          due to a failed or cancelled execution.
           - REFERENCE: A state indicating that the artifact is a reference artifact. At
          execution start time, the orchestrator produces an output artifact for
          each output key with state PENDING. However, for an intermediate
          artifact, this first artifact's state will be REFERENCE. Intermediate
          artifacts emitted during a component's execution will copy the REFERENCE
          artifact's attributes. At the end of an execution, the artifact state
          should remain REFERENCE instead of being changed to LIVE.
      default: UNKNOWN
      enum:
        - UNKNOWN
        - PENDING
        - LIVE
        - MARKED_FOR_DELETION
        - DELETED
        - ABANDONED
        - REFERENCE
      type: string
    ExecutionState:
      description: |-
        The state of the Execution. The state transitions are
          NEW -> RUNNING -> COMPLETE | CACHED | FAILED | CANCELED
        CACHED means the execution is skipped due to cached results.
        CANCELED means the execution is skipped due to precondition not met. It is
        different from CACHED in that a CANCELED execution will not have any event
        associated with it. It is different from FAILED in that there is no
        unexpected error happened and it is regarded as a normal state.
      default: UNKNOWN
      enum:
        - UNKNOWN
        - NEW
        - RUNNING
        - COMPLETE
        - FAILED
        - CACHED
        - CANCELED
      type: string
    ModelArtifact:
      description: 'An ML model artifact. '
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseArtifact'
        -
          $ref: '#/components/schemas/ModelArtifactCreate'
    RegisteredModelList:
      description: 'List of RegisteredModels. '
      type: object
      allOf:
        -
          type: object
          properties:
            items:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/RegisteredModel'
              readOnly: false
        -
          $ref: '#/components/schemas/BaseResourceList'
    RegisteredModel:
      description: 'A registered model in model registry. A registered model has OdhModelVersion children. '
      allOf:
        -
          $ref: '#/components/schemas/BaseResource'
        -
          type: object
        -
          $ref: '#/components/schemas/RegisteredModelCreate'
    ModelVersionList:
      description: 'List of ModelVersion entities. '
      type: object
      allOf:
        -
          type: object
          properties:
            items:
              description: Array of `ModelVersion` entities.
              type: array
              items:
                $ref: '#/components/schemas/ModelVersion'
        -
          $ref: '#/components/schemas/BaseResourceList'
    ModelArtifactList:
      description: 'List of ModelArtifact entities. '
      type: object
      allOf:
        -
          type: object
          properties:
            items:
              description: 'Array of `ModelArtifact` entities. '
              type: array
              items:
                $ref: '#/components/schemas/ModelArtifact'
        -
          $ref: '#/components/schemas/BaseResourceList'
    RegisteredModelCreate:
      description: 'A registered model in model registry. A registered model has OdhModelVersion children. '
      allOf:
        -
          type: object
        -
          $ref: '#/components/schemas/BaseResourceCreate'
        -
          $ref: '#/components/schemas/RegisteredModelUpdate'
    RegisteredModelUpdate:
      description: 'A registered model in model registry. A registered model has OdhModelVersion children. '
      allOf:
        -
          $ref: '#/components/schemas/BaseResourceUpdate'
    ModelVersion:
      description: 'Represents a collection of artifacts and executions for a version of a RegisteredModel. '
      allOf:
        -
          $ref: '#/components/schemas/ModelVersionCreate'
        -
          $ref: '#/components/schemas/BaseResource'
    ModelVersionCreate:
      description: 'Represents a collection of artifacts and executions for a version of a RegisteredModel. '
      required:
        - registeredModelID
      allOf:
        -
          $ref: '#/components/schemas/BaseResourceCreate'
        -
          $ref: '#/components/schemas/ModelVersionUpdate'
      properties:
        registeredModelID:
          description: ID of the `RegisteredModel` to which this version belongs.
          type: string
    ModelVersionUpdate:
      description: 'Represents a collection of artifacts and executions for a version of a RegisteredModel. '
      allOf:
        -
          $ref: '#/components/schemas/BaseResourceUpdate'
    BaseArtifact:
      allOf:
        -
          $ref: '#/components/schemas/BaseArtifactCreate'
        -
          $ref: '#/components/schemas/BaseResource'
    BaseArtifactCreate:
      allOf:
        -
          $ref: '#/components/schemas/BaseArtifactUpdate'
        -
          $ref: '#/components/schemas/BaseResourceCreate'
    BaseArtifactUpdate:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseResourceUpdate'
      properties:
        uri:
          description: |-
            The uniform resource identifier of the physical artifact.
            May be empty if there is no physical artifact.
          type: string
        state:
          $ref: '#/components/schemas/ArtifactState'
    BaseExecution:
      allOf:
        -
          $ref: '#/components/schemas/BaseExecutionCreate'
        -
          type: object
        -
          $ref: '#/components/schemas/BaseResource'
    BaseExecutionCreate:
      allOf:
        -
          $ref: '#/components/schemas/BaseExecutionUpdate'
        -
          type: object
        -
          $ref: '#/components/schemas/BaseResourceCreate'
    BaseExecutionUpdate:
      type: object
      allOf:
        -
          type: object
          properties:
            lastKnownState:
              $ref: '#/components/schemas/ExecutionState'
        -
          $ref: '#/components/schemas/BaseResourceUpdate'
    MetadataValue:
      oneOf:
        -
          type: object
          properties:
            int_value:
              format: int64
              type: string
        -
          type: object
          properties:
            double_value:
              format: double
              type: number
        -
          type: object
          properties:
            string_value:
              type: string
        -
          type: object
          properties:
            struct_value:
              description: Base64 encoded bytes for struct value
              type: string
        -
          type: object
          properties:
            type:
              description: url describing proto value
              type: string
            proto_value:
              description: Base64 encoded bytes for proto value
              type: string
        -
          type: object
          properties:
            bool_value:
              type: boolean
      description: A value in properties.
    BaseResource:
      allOf:
        -
          $ref: '#/components/schemas/BaseResourceCreate'
        -
          type: object
          properties:
            id:
              format: int64
              description: Output only. The unique server generated id of the resource.
              type: string
              readOnly: true
            createTimeSinceEpoch:
              format: int64
              description: Output only. Create time of the resource in millisecond since epoch.
              type: string
              readOnly: true
            lastUpdateTimeSinceEpoch:
              format: int64
              description: |-
                Output only. Last update time of the resource since epoch in millisecond
                since epoch.
              type: string
              readOnly: true
    BaseResourceCreate:
      allOf:
        -
          $ref: '#/components/schemas/BaseResourceUpdate'
        -
          type: object
          properties:
            name:
              description: |-
                The client provided name of the artifact. This field is optional. If set,
                it must be unique among all the artifacts of the same artifact type within
                a database instance and cannot be changed once set.
              type: string
    BaseResourceUpdate:
      type: object
      properties:
        customProperties:
          description: User provided custom properties which are not defined by its type.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MetadataValue'
        externalID:
          description: |-
            The external id that come from the clients’ system. This field is optional.
            If set, it must be unique among all resources within a database instance.
          type: string
    BaseResourceList:
      required:
        - nextPageToken
        - pageSize
        - size
      type: object
      properties:
        nextPageToken:
          description: Token to use to retrieve next page of results.
          type: string
        pageSize:
          format: int32
          description: Maximum number of resources to return in the result.
          type: integer
        size:
          format: int32
          description: Number of items in result list.
          type: integer
    Artifact:
      oneOf:
        -
          type: object
        -
          $ref: '#/components/schemas/ModelArtifact'
      description: 'List of Artifact entities. '
      type: object
    ArtifactList:
      description: 'A list of Artifact entities. '
      type: object
      allOf:
        -
          type: object
          properties:
            items:
              description: 'Array of `Artifact` entities. '
              type: array
              items:
                $ref: '#/components/schemas/Artifact'
        -
          $ref: '#/components/schemas/BaseResourceList'
    OrderByField:
      description: 'Supported fields for ordering result entities. '
      enum:
        - CREATE_TIME
        - LAST_UPDATE_TIME
        - ID
      type: string
    ModelArtifactUpdate:
      description: 'An ML model artifact. '
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseArtifactUpdate'
      properties:
        modelFormatName:
          description: 'Name of the model format. '
          type: string
        runtime:
          description: 'Model runtime. '
          type: string
        storageKey:
          description: 'Storage secret name. '
          type: string
        storagePath:
          description: Path for model in storage provided by `storageKey`.
          type: string
        modelFormatVersion:
          description: 'Version of the model format. '
          type: string
        serviceAccountName:
          description: 'Name of the service account with storage secret. '
          type: string
    ModelArtifactCreate:
      description: 'An ML model artifact. '
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseArtifactCreate'
        -
          $ref: '#/components/schemas/ModelArtifactUpdate'
    Error:
      description: Error code and message.
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: Error code
          type: string
        message:
          description: Error message
          type: string
  responses:
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified resource was not found
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request parameters
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unexpected internal server error
    ModelArtifactListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelArtifactList'
      description: 'A response containing a list of ModelArtifact entities. '
    ModelArtifactResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelArtifact'
      description: 'A response containing a `ModelArtifact` entity. '
    ModelVersionListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelVersionList'
      description: 'A response containing a list of `ModelVersion` entities. '
    ModelVersionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelVersion'
      description: 'A response containing a `ModelVersion` entity. '
    RegisteredModelListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisteredModelList'
      description: 'A response containing a list of `RegisteredModel` entities. '
    RegisteredModelResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisteredModel'
      description: 'A response containing a `RegisteredModel` entity. '
    ArtifactResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Artifact'
      description: 'A response containing an `Artifact` entity. '
    ArtifactListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArtifactList'
      description: 'A response containing a list of `Artifact` entities. '
  parameters:
    id:
      name: id
      description: The ID of resource.
      schema:
        type: string
      in: path
      required: true
    name:
      examples:
        name:
          value: artifact-name
      name: name
      description: Name of entity to search.
      schema:
        type: string
      in: query
      required: false
    externalID:
      examples:
        externalID:
          value: '10'
      name: externalID
      description: External ID of entity to search.
      schema:
        type: string
      in: query
      required: false
    pageSize:
      examples:
        pageSize:
          value: '100'
      name: pageSize
      description: Number of entities in each page.
      schema:
        type: string
      in: query
      required: false
    nextPageToken:
      examples:
        nextPageToken:
          value: IkhlbGxvLCB3b3JsZC4i
      name: nextPageToken
      description: Token to use to retrieve next page of results.
      schema:
        type: string
      in: query
      required: false
    orderBy:
      style: form
      explode: true
      examples:
        orderBy:
          value: name asc
      name: orderBy
      description: Specifies the order by criteria for listing entities.
      schema:
        $ref: '#/components/schemas/OrderByField'
      in: query
      required: false
  securitySchemes:
    Bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: Bearer JWT scheme
security:
  -
    Bearer: []
tags:
  -
    name: ModelRegistryService
    description: Model Registry Service REST API
